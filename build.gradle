apply plugin: 'eclipse'

allprojects {
   repositories {
      mavenCentral()
      mavenLocal()
      mavenRepo name: 'jboss-nexus', url: "http://repository.jboss.org/nexus/content/groups/public/"
      mavenRepo name: "jboss-snapshots", url: "http://snapshots.jboss.org/maven2/"
   }
}

buildscript {
   repositories {
      mavenLocal()
      mavenRepo name: 'jboss-nexus', url: "http://repository.jboss.org/nexus/content/groups/public/"
      mavenRepo name: "jboss-snapshots", url: "http://snapshots.jboss.org/maven2/"
   }
}

ext.arquillianVendor            = 'arquillian.org'
ext.arquillianURL               = 'http://' + arquillianVendor
ext.arquillianBaseGroupId       = 'org.arquillian'
ext.arquillianVersion           = '1.0.4.Final-SNAPSHOT'

ext.shrinkwrapVersion               = '1.0.1'
ext.shrinkwrapDescriptorVersion     = '2.0.0-alpha-3'

ext.libraries = [
   // Testing
   junit:                                       'junit:junit:4.10',
   testng:                                      'org.testng:testng:6.8',
   
   // ShrinkWrap
   shrinkwrap_api: 				                'org.jboss.shrinkwrap:shrinkwrap-api:' + shrinkwrapVersion,
   shrinkwrap_impl:                             'org.jboss.shrinkwrap:shrinkwrap-impl-base:' + shrinkwrapVersion,
   shrinkwrap_resolver_api:                     'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-api:' + shrinkwrapVersion,
   shrinkwrap_resolver_maven_api:               'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-api-maven:' + shrinkwrapVersion,
   shrinkwrap_resolver_maven_impl:              'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:' + shrinkwrapVersion,
   shrinkwrap_descriptors_api:	                'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-base:' + shrinkwrapDescriptorVersion,
   shrinkwrap_descriptors_api_javaee:           'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-javaee:' + shrinkwrapDescriptorVersion,
   shrinkwrap_descriptors_spi:                  'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-spi:' + shrinkwrapDescriptorVersion,
   shrinkwrap_descriptors_impl:                 'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl:' + shrinkwrapDescriptorVersion,
   shrinkwrap_descriptors_impl_javaee:          'org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-javaee:' + shrinkwrapDescriptorVersion,

   // Misc Test Compile/Runtime
   mockito:                                     'org.mockito:mockito-all:1.8.3',
   jetty:                                       ['org.eclipse.jetty:jetty-server:8.1.2.v20120308', 'org.eclipse.jetty:jetty-servlet:8.1.2.v20120308'],
   slf4j_simple:                                'org.slf4j:slf4j-simple:1.6.1',
   
   // JBoss
   weld:                                        'org.jboss.weld:weld-core:1.1.5.Final',

   // EE APIs
   servlet_api:                                 'org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec:1.0.0.Final',
   ejb_api:                                     'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final',
   cdi_api:                                     'javax.enterprise:cdi-api:1.0',
   el_api:                                      'javax.el:el-api:2.2'
]



def javaProjects() {
   subprojects.findAll { project -> new File(project.projectDir, 'src/main/java').exists() }
}
def javaProjectsWithTest() {
   subprojects.findAll { project -> new File(project.projectDir, 'src/test/java').exists() }
}

configure(javaProjects()) { project ->
    apply plugin: 'java'
    apply plugin: 'maven'
 
    configurations {
       provided {
          description = 'Non-exported compile-time dependencies.'
       }
       testCompile.extendsFrom provided
    }
    
    sourceSets.main { compileClasspath += configurations.provided }
 
    defaultTasks 'build'
    buildDir = "target"
 
    targetCompatibility = 1.5
    sourceCompatibility = 1.5
    version = arquillianVersion
 
    manifest.mainAttributes(
          provider: 'gradle',
          'Implementation-Url': arquillianURL,
          'Implementation-Version': version,
          'Implementation-Vendor': arquillianVendor,
          'Implementation-Vendor-Id': arquillianBaseGroupId
          )

    def generatedGroupId = project.parent.name.endsWith("s") ? project.parent.name.substring(0, project.parent.name.length()-1):project.parent.name 
    def generatedArtifactId = generatedGroupId + '-' + project.name
    
    def completeGroupId = arquillianBaseGroupId + '.' + generatedGroupId
    def completeArtifactId = 'arquillian-' + generatedArtifactId
    
    archivesBaseName = completeArtifactId
    group = completeGroupId

    def pomConfig = {
       description project.description

       url arquillianURL
       organization {
          name 'Arquillian'
          url arquillianURL
       }
       issueManagement {
          system 'jira'
          url 'http://jira.jboss.org/jira/browse/ARQ'
       }
       scm {
          url "http://github.com/arquillian/arquillian-core"
          connection "scm:git:http://github.com/arquillian/arquillian-core.git"
          developerConnection "scm:git:git@github.com:arquillian/arquillian-core.git"
       }
       licenses {
          license {
             name 'Apache License, Version 2.0'
             url 'http://www.apache.org/licenses/LICENSE-2.0'
             distribution 'repo'
          }
       }
       developers {
       }
    }
 
    configure(install.repositories.mavenInstaller) { pom.project pomConfig }
    uploadArchives {
        repositories {
           mavenDeployer {
              name = 'jbossDeployer'
              //pom.artifactId = completeArtifactId 
              //repository(id: "jboss-releases-repository", url: "https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/")
              //snapshotRepository(id: "jboss-snapshots-repository", url: "https://repository.jboss.org/nexus/content/repositories/snapshots")
           }
        }
    }

    task sourcesJar(type: Jar, dependsOn: compileJava) {
       from sourceSets.main.allSource
       classifier = 'sources'
    }

    artifacts {
       archives sourcesJar
    }

    uploadArchives.dependsOn sourcesJar
}

configure(javaProjectsWithTest()) { project ->
   apply from: new File(project.rootProject.projectDir, 'testVersionRange.gradle')

   dependencies {
      testCompile libraries.junit
   }

   task testsJar(type: Jar, dependsOn: compileTestJava) {
      from sourceSets.test.allSource
      classifier = 'tests'
   }

   task testSourcesJar(type: Jar, dependsOn: compileTestJava) {
      from sourceSets.test.allSource
      classifier = 'test-sources'
   }

   artifacts {
      archives testsJar, testSourcesJar
   }
   uploadArchives.dependsOn testsJar, testSourcesJar
}


task wrapper(type: Wrapper) { gradleVersion = '1.5' }
